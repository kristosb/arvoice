{"version":3,"sources":["Components/header/threejs/MsgText.js","Components/header/threejs/GeneralLights.js","Components/header/Speach.js","Components/header/threejs/SceneManager.js","Components/header/threejs/threeEntryPoint.js","Components/header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["scene","camera","textGroup","THREE","loader","textAdd","txt","font","parse","hfont","textGeometry","size","height","curveSegments","textMaterial","color","transparent","opacity","side","textMesh","rotation","y","children","map","x","geometry","translate","material","add","length","bottomLine","remove","update","time","positionSet","z","position","set","light","EventEmitter","require","recognition","window","SpeechRecognition","webkitSpeechRecognition","e","console","error","scrollTimeout","event","emit","name","data","continuous","onresult","current","resultIndex","transcript","results","clearInterval","match","reverse","setInterval","onstart","onspeechend","onend","start","onerror","on","stop","canvas","clock","screenDimensions","width","background","buildScene","renderer","antialias","alpha","xr","enabled","DPR","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","buildRender","aspectRatio","buildCamera","sceneSubjects","GeneralLights","sceneOsd","MsgText","concat","createSceneSubjects","addEventListener","ev","keycode","which","spechToText","msgTextAdd","key","Speach","elapsedTime","getElapsedTime","i","render","onWindowResize","aspect","updateProjectionMatrix","vrButtonGet","VRButton","createButton","vrRender","ren","setAnimationLoop","speachStart","Header","container","document","createElement","appendChild","createCanvas","sceneManager","SceneManager","resizeCanvas","style","offsetWidth","offsetHeight","Math","round","querySelector","log","onresize","threeEntryPoint","this","threeRootElement","className","ref","element","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c46be85.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport hfont from \"../../../assets/helvetiker_regular.typeface.json\";\n//import hfont from './helvetiker_regular.typeface.json';\n//import helveticaRegular from './../../fonts/helvetiker_regular.typeface.json';\n\nexport default function scene(scene, camera) {   \n    const textGroup = new THREE.Group();\n    const loader = new THREE.FontLoader();\n    var posOffsetY = -1.4;\n    const maxLines = 3;\n    //extGroup.position.set(5,2,-5);\n    function positionSet(x,y,z){\n        textGroup.position.set(x,y,z);\n    }\n    function textAdd(txt){\n \n        var font = loader.parse(hfont); \n        var textGeometry = new THREE.TextGeometry( txt, { font: font, size: 0.5, height: 0.005, curveSegments: 20 } );\n        var textMaterial = new THREE.MeshBasicMaterial( { \n            color: 0xFFFFFF,\n            transparent: true,\n            opacity: 0.9,\n            side: THREE.DoubleSide\n        } ); \n        var textMesh = new THREE.Mesh( textGeometry, textMaterial ); \n        textMesh.rotation.y = 3.14;\n        //textMesh.position.z = - 5;\n        //textMesh.position.y = 2;\n        //textMesh.position.x = 5;\n        \n        textGroup.children.map(x=>{x.geometry.translate(0,posOffsetY,0);x.material.opacity = 0.4;});\n        textGroup.add(textMesh);\n        if (textGroup.children.length > maxLines) {\n            var bottomLine = textGroup.children[0];\n            textGroup.remove(bottomLine);\n        }\n\n    }\n    textAdd(\"hello how are you\");\n    scene.add(textGroup);\n    camera.add(textGroup);\n    function update(time) {\n\n    }\n\n    return {\n        update,\n        textAdd,\n        positionSet\n    }\n\n}","import * as THREE from 'three'\n\n\nexport default function scene(scene) {    \n\n    /*const lightIn = new THREE.PointLight(\"#4CAF50\", 30);\n    const lightOut = new THREE.PointLight(\"#2196F3\", 10);\n    lightOut.position.set(40,20,40);*/\n    const color = 0xFFFFFF;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    //light.position.set(-1, 2, 4);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n    //scene.add(lightIn);\n    //scene.add(lightOut);\n    \n    const rad = 80;\n\n    function update(time) {\n        //const x = rad * Math.sin(time*0.2)\n        //lightOut.position.x = x;\n    }\n\n    return {\n        update\n    }\n}","import { strict } from 'assert';\nconst EventEmitter = require( 'events' );\ntry {\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    var recognition = new SpeechRecognition();\n  }\n  catch(e) {\n    console.error(e);\n    //$('.no-browser-support').show();\n    //$('.app').hide();\n  }\n\n\nexport default function scene() {  \n    const event = new EventEmitter();\n    var something = 1;\n    var noteContent = '';\n    recognition.continuous = false;\n    var scrollTimeout;\n    /*function getText(){\n        const msg =\"hello1\";\n        emit(\"ready\",\"hello2\"+something.toString());\n        something = something +1;\n        return msg;\n    }*/\n    // This block is called every time the Speech APi captures a line. \n    recognition.onresult = function(event) {\n\n        // event is a SpeechRecognitionEvent object.\n        // It holds all the lines we have captured so far. \n        // We only need the current one.\n        var current = event.resultIndex;\n    \n        // Get a transcript of what was said.\n        var transcript = event.results[current][0].transcript;\n    \n        // Add the current transcript to the contents of our Note.\n        // There is a weird bug on mobile, where everything is repeated twice.\n        // There is no official solution so far so we have to handle an edge case.\n        var mobileRepeatBug = (current == 1 && transcript == event.results[0][0].transcript);\n    \n        if(!mobileRepeatBug) {\n        //noteContent += transcript;\n        //emit(\"ready\",transcript);\n          if (scrollTimeout) clearInterval(scrollTimeout);\n          var transArray = transcript.match(/.{1,34}/g);\n          transArray.reverse().map(x=>emit(\"ready\",x));\n          //scrollTimeout = setTimeout(function(){emit(\"ready\",\"tmout\")},5000);\n          scrollTimeout = setInterval(function(){emit(\"ready\",\"\\n\")},3000);\n        }\n    };\n    recognition.onstart = function() { \n        //emit(\"ready\",\"...\");\n        var transArray = \"...\".match(/.{1,34}/g);\n        transArray.reverse().map(x=>emit(\"ready\",x));\n      }\n      \n      recognition.onspeechend = function() {\n        emit(\"ready\",\".\");\n        if (scrollTimeout) clearInterval(scrollTimeout);\n        //recognition.stop();\n        //recognition.start();\n      }\n      /*recognition.onsoundstart = function() {\n        console.log('Some sound is being received');\n      }*/\n      recognition.onend = function() {\n        //console.log('Speech recognition service disconnected');\n        recognition.start();\n      }\n      \n      recognition.onerror = function(event) {\n        if(event.error == 'no-speech') {\n            emit(\"ready\",\"...no speach...\"); \n            if (scrollTimeout) clearInterval(scrollTimeout);\n        };\n      }\n    function emit(name, data){\n        event.emit(name, data);\n    }\n    function on(name,data){\n        event.on(name, data);\n        //console.log(\"text\");\n    }\n    function start(){\n        recognition.start();\n    }\n    function stop(){\n        recognition.stop();\n    }\n    return {\n        //getText,\n        on,\n        start,\n        stop\n    }\n\n}","import * as THREE from 'three';\n//import SceneSubject from './SceneSubject';\nimport MsgText from './MsgText';\nimport GeneralLights from './GeneralLights';\nimport Speach from '../Speach';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton';\n//import { VoiceButton } from './VoiceButton';\nexport default function canvas(canvas)  {\n\n    const clock = new THREE.Clock();\n    const origin = new THREE.Vector3(0,0,0);\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n    //console.log(screenDimensions);\n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene, camera);\n\n    /*var geometry = new THREE.BoxGeometry(1,1,1);\n    var material = new THREE.MeshBasicMaterial({color: 0xff0000});\n    var cube = new THREE.Mesh(geometry,material);\n    scene.add(cube);\n    camera.add(cube);\n    //camera.add(sceneSubjects[1]);\n    cube.position.set(0, 0, -10);*/\n    scene.add(camera);\n    //updatePositionForCamera(camera, cube);\n\n    window.addEventListener(\"keypress\", onKeyPress);\n    const spechToText = new Speach();\n    onSpeach();\n    //msgTextAdd(\"press 1 and \\n speak\");\n\n    function buildScene() {\n        const scene = new THREE.Scene();\n        //scene.background = new THREE.Color(\"#FFF\");\n        scene.background = new THREE.Color('black');\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        renderer.xr.enabled = true;\n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        renderer.setSize(width, height);\n\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true; \n        \n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 75;\n        const nearPlane = 0.1;\n        const farPlane = 80; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n        //camera.position.z = 40;\n        camera.position.set(0, 0, 0);\n\n        return camera;\n    }\n\n    function createSceneSubjects(scene, camera) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            //new MsgText(scene,camera)\n            //new SceneSubject(scene),\n        ];\n        const sceneOsd= [\n            new MsgText(scene,camera),\n        ];\n        sceneOsd[0].positionSet(2,1,-5);\n        return sceneSubjects.concat(sceneOsd);\n    }\n\n\n    function update() {\n        const elapsedTime = clock.getElapsedTime();\n\n        for(let i=0; i<sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n        //sceneSubjects[2].textAdd(\"world\");\n        //updateCameraPositionRelativeToMouse();\n        //updatePositionForCamera(camera, cube);\n        renderer.render(scene, camera);\n    }\n    function onKeyPress(ev) {\n        let keycode = ev.which;\n        if (\n          (keycode >= 48 && keycode <= 57) ||\n          (keycode >= 97 && keycode <= 122) ||\n          (keycode >= 65 && keycode <= 90)\n        ) {\n          //this.addLetter(ev.key);\n          if(keycode == 49) {\n            //spechToText.getText();\n            spechToText.start();\n          }else{\n            msgTextAdd(\"key= \"+ev.key);\n          }\n        }\n      }\n    function speachStart(){\n        spechToText.start();\n    }\n    //enable event, on ready send data to msgtext\n    function onSpeach(){\n        spechToText.on(\"ready\",x=> msgTextAdd(x));     \n    }\n    function msgTextAdd(x){\n        sceneSubjects[1].textAdd(x);\n    }\n    /*function updateCameraPositionRelativeToMouse() {\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\n        camera.lookAt(origin);\n    }*/\n\n    function onWindowResize() {\n        const { width, height } = canvas;\n        \n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n    }\n\n    /*function onMouseMove(x, y) {\n        mousePosition.x = x;\n        mousePosition.y = y;\n    }*/\n\n    function vrButtonGet()\n    {\n        return VRButton.createButton( renderer );\n    }\n    function vrRender(ren){\n        renderer.setAnimationLoop(ren);\n    }\n\n    /*/function startVoiceGet(){\n        return VoiceButton.createButton( renderer );\n    }*/\n    return {\n        update,\n        onWindowResize,\n        //onMouseMove,\n        vrButtonGet,\n        vrRender,\n        speachStart\n        //startVoiceGet\n    }\n}","import SceneManager from './SceneManager';\n\n\nexport default container => {\n    const canvas = createCanvas(document, container);\n    const sceneManager = new SceneManager(canvas);\n\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n    \n    container.appendChild(sceneManager.vrButtonGet());\n    //container.appendChild(sceneManager.startVoiceGet());\n    const elem = document.querySelector('#VRButton');//'#VoiceButton');\n    elem.addEventListener('click', () => {\n      console.log(\"startVoice\");\n      sceneManager.speachStart();\n    });\n    bindEventListeners();\n    render();\n    \n\n\n    function createCanvas(document, container) {\n        const canvas = document.createElement('canvas');    \n        container.appendChild(canvas);\n        \n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        //window.onmousemove = mouseMove;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize()\n    }\n\n    /*function mouseMove({screenX, screenY}) {\n        sceneManager.onMouseMove(screenX-canvasHalfWidth, screenY-canvasHalfHeight);\n    }*/\n\n    function render(time) {\n        sceneManager.vrRender(render);\n        //requestAnimationFrame(render);\n        sceneManager.update();\n    }\n}","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./threejs/threeEntryPoint\"\nimport \"./header.css\"\n\nexport default class Header extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"header-header\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","//import logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}