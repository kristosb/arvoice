{"version":3,"sources":["logo.svg","Components/header/threejs/MsgText.js","Components/header/threejs/GeneralLights.js","Components/header/Speach.js","Components/header/threejs/SceneManager.js","Components/header/threejs/threeEntryPoint.js","Components/header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["scene","textGroup","THREE","loader","add","update","time","textAdd","txt","load","font","color","matLite","side","transparent","opacity","message","shapes","generateShapes","geometry","computeBoundingBox","boundingBox","max","x","min","text","position","z","y","children","map","translate","material","length","bottomLine","remove","light","set","EventEmitter","require","recognition","window","SpeechRecognition","webkitSpeechRecognition","e","console","error","scrollTimeout","event","emit","name","data","continuous","onresult","current","resultIndex","transcript","results","clearInterval","match","reverse","setInterval","onstart","onspeechend","onerror","on","start","stop","canvas","clock","screenDimensions","width","height","background","buildScene","renderer","antialias","alpha","xr","enabled","DPR","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","buildRender","camera","aspectRatio","buildCamera","sceneSubjects","GeneralLights","MsgText","createSceneSubjects","addEventListener","ev","keycode","which","spechToText","msgTextAdd","key","Speach","elapsedTime","getElapsedTime","i","render","onWindowResize","aspect","updateProjectionMatrix","vrButtonGet","VRButton","createButton","vrRender","ren","setAnimationLoop","speachStart","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.605bf7d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as THREE from 'three'\nimport hfont from \"../../../assets/helvetiker_regular.typeface.json\";\n\n\n\nexport default function scene(scene) {   \n    const textGroup = new THREE.Group();\n    const loader = new THREE.FontLoader();\n    var currentPositionY = 0;\n    var posOffsetY = -5;\n    const maxLines = 3;\n    function textAdd(txt){\n        loader.load( 'helvetiker_regular.typeface.json', function ( font ) {\n\n            const color = 0xFFFFFF;//0x006699;\n\n            const matDark = new THREE.LineBasicMaterial( {\n                color: color,\n                side: THREE.DoubleSide\n            } );\n\n            const matLite = new THREE.MeshBasicMaterial( {\n                color: color,\n                transparent: true,\n                opacity: 0.9,\n                side: THREE.DoubleSide\n            } );\n\n            //txt = txt.splice(6,0,\"\\n\\r\")\n            const message = txt;//\"   Three.js\\nSimple text.\";\n\n            const shapes = font.generateShapes( message, 5 );\n\n            const geometry = new THREE.ShapeGeometry( shapes );\n\n            geometry.computeBoundingBox();\n\n            const xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\n            //geometry.translate( xMid, currentPositionY, 0 );\n            \n            // make shape ( N.B. edge view not visible )\n\n            const text = new THREE.Mesh( geometry, matLite );\n            text.position.z = - 30;\n            text.position.y = 10;\n            text.position.x = -20;\n            //scene.add( text );\n            \n            textGroup.children.map(x=>{x.geometry.translate(0,posOffsetY,0);x.material.opacity = 0.4;});\n            textGroup.add(text);\n            if (textGroup.children.length > maxLines) {\n                var bottomLine = textGroup.children[0];\n                textGroup.remove(bottomLine);\n            }\n            \n\n        } ); //end load function\n    }\n    //textAdd(\"hello\");\n    scene.add(textGroup);\n    function update(time) {\n\n    }\n\n    return {\n        update,\n        textAdd\n    }\n\n}","import * as THREE from 'three'\n\n\nexport default function scene(scene) {    \n\n    /*const lightIn = new THREE.PointLight(\"#4CAF50\", 30);\n    const lightOut = new THREE.PointLight(\"#2196F3\", 10);\n    lightOut.position.set(40,20,40);*/\n    const color = 0xFFFFFF;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    //light.position.set(-1, 2, 4);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n    //scene.add(lightIn);\n    //scene.add(lightOut);\n    \n    const rad = 80;\n\n    function update(time) {\n        //const x = rad * Math.sin(time*0.2)\n        //lightOut.position.x = x;\n    }\n\n    return {\n        update\n    }\n}","import { strict } from 'assert';\nconst EventEmitter = require( 'events' );\ntry {\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    var recognition = new SpeechRecognition();\n  }\n  catch(e) {\n    console.error(e);\n    //$('.no-browser-support').show();\n    //$('.app').hide();\n  }\n\n\nexport default function scene() {  \n    const event = new EventEmitter();\n    var something = 1;\n    var noteContent = '';\n    recognition.continuous = true;\n    var scrollTimeout;\n    /*function getText(){\n        const msg =\"hello1\";\n        emit(\"ready\",\"hello2\"+something.toString());\n        something = something +1;\n        return msg;\n    }*/\n    // This block is called every time the Speech APi captures a line. \n    recognition.onresult = function(event) {\n\n        // event is a SpeechRecognitionEvent object.\n        // It holds all the lines we have captured so far. \n        // We only need the current one.\n        var current = event.resultIndex;\n    \n        // Get a transcript of what was said.\n        var transcript = event.results[current][0].transcript;\n    \n        // Add the current transcript to the contents of our Note.\n        // There is a weird bug on mobile, where everything is repeated twice.\n        // There is no official solution so far so we have to handle an edge case.\n        var mobileRepeatBug = (current == 1 && transcript == event.results[0][0].transcript);\n    \n        if(!mobileRepeatBug) {\n        //noteContent += transcript;\n        //emit(\"ready\",transcript);\n          if (scrollTimeout) clearInterval(scrollTimeout);\n          var transArray = transcript.match(/.{1,12}/g);\n          transArray.reverse().map(x=>emit(\"ready\",x));\n          //scrollTimeout = setTimeout(function(){emit(\"ready\",\"tmout\")},5000);\n          scrollTimeout = setInterval(function(){emit(\"ready\",\"\\n\")},3000);\n        }\n    };\n    recognition.onstart = function() { \n        emit(\"ready\",\"...\");\n      }\n      \n      recognition.onspeechend = function() {\n        emit(\"ready\",\".\");\n        if (scrollTimeout) clearInterval(scrollTimeout);\n        //recognition.stop();\n        //recognition.start();\n      }\n      \n      recognition.onerror = function(event) {\n        if(event.error == 'no-speech') {\n            emit(\"ready\",\"...no speach...\"); \n            if (scrollTimeout) clearInterval(scrollTimeout);\n        };\n      }\n    function emit(name, data){\n        event.emit(name, data);\n    }\n    function on(name,data){\n        event.on(name, data);\n        //console.log(\"text\");\n    }\n    function start(){\n        recognition.start();\n    }\n    function stop(){\n        recognition.stop();\n    }\n    return {\n        //getText,\n        on,\n        start,\n        stop\n    }\n\n}","import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport MsgText from './MsgText';\nimport GeneralLights from './GeneralLights';\nimport Speach from '../Speach';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton';\n//import { VoiceButton } from './VoiceButton';\nexport default function canvas(canvas)  {\n\n    const clock = new THREE.Clock();\n    const origin = new THREE.Vector3(0,0,0);\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n    //console.log(screenDimensions);\n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene);\n\n    window.addEventListener(\"keypress\", onKeyPress);\n    const spechToText = new Speach();\n    onSpeach();\n    msgTextAdd(\"press 1 and \\n speak\");\n\n\n    function buildScene() {\n        const scene = new THREE.Scene();\n        //scene.background = new THREE.Color(\"#FFF\");\n        scene.background = new THREE.Color('black');\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        renderer.xr.enabled = true;\n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        renderer.setSize(width, height);\n\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true; \n        \n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 75;\n        const nearPlane = 0.1;\n        const farPlane = 50; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n        //camera.position.z = 40;\n        camera.position.set(0, 1.6, 0);\n\n        return camera;\n    }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            //new SceneSubject(scene),\n            new MsgText(scene),\n            //new Speach()\n        ];\n\n        return sceneSubjects;\n    }\n\n    function update() {\n        const elapsedTime = clock.getElapsedTime();\n\n        for(let i=0; i<sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n        //sceneSubjects[2].textAdd(\"world\");\n        //updateCameraPositionRelativeToMouse();\n\n        renderer.render(scene, camera);\n    }\n    function onKeyPress(ev) {\n        let keycode = ev.which;\n        if (\n          (keycode >= 48 && keycode <= 57) ||\n          (keycode >= 97 && keycode <= 122) ||\n          (keycode >= 65 && keycode <= 90)\n        ) {\n          //this.addLetter(ev.key);\n          if(keycode == 49) {\n            //spechToText.getText();\n            spechToText.start();\n          }else{\n            msgTextAdd(\"key= \"+ev.key);\n          }\n        }\n      }\n    function speachStart(){\n        spechToText.start();\n    }\n    //enable event, on ready send data to msgtext\n    function onSpeach(){\n        spechToText.on(\"ready\",x=> msgTextAdd(x));     \n    }\n    function msgTextAdd(x){\n        sceneSubjects[1].textAdd(x);\n    }\n    /*function updateCameraPositionRelativeToMouse() {\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\n        camera.lookAt(origin);\n    }*/\n\n    function onWindowResize() {\n        const { width, height } = canvas;\n        \n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n    }\n\n    /*function onMouseMove(x, y) {\n        mousePosition.x = x;\n        mousePosition.y = y;\n    }*/\n\n    function vrButtonGet()\n    {\n        return VRButton.createButton( renderer );\n    }\n    function vrRender(ren){\n        renderer.setAnimationLoop(ren);\n    }\n\n    /*/function startVoiceGet(){\n        return VoiceButton.createButton( renderer );\n    }*/\n    return {\n        update,\n        onWindowResize,\n        //onMouseMove,\n        vrButtonGet,\n        vrRender,\n        speachStart\n        //startVoiceGet\n    }\n}","import SceneManager from './SceneManager';\n\n\nexport default container => {\n    const canvas = createCanvas(document, container);\n    const sceneManager = new SceneManager(canvas);\n\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n    \n    container.appendChild(sceneManager.vrButtonGet());\n    //container.appendChild(sceneManager.startVoiceGet());\n    const elem = document.querySelector('#VRButton');//'#VoiceButton');\n    elem.addEventListener('click', () => {\n      console.log(\"startVoice\");\n      sceneManager.speachStart();\n    });\n    bindEventListeners();\n    render();\n    \n\n\n    function createCanvas(document, container) {\n        const canvas = document.createElement('canvas');    \n        container.appendChild(canvas);\n        \n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        //window.onmousemove = mouseMove;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize()\n    }\n\n    /*function mouseMove({screenX, screenY}) {\n        sceneManager.onMouseMove(screenX-canvasHalfWidth, screenY-canvasHalfHeight);\n    }*/\n\n    function render(time) {\n        sceneManager.vrRender(render);\n        //requestAnimationFrame(render);\n        sceneManager.update();\n    }\n}","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./threejs/threeEntryPoint\"\nimport \"./header.css\"\n\nexport default class Header extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"header-header\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*<Header />*/}\n      <h1>hello</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}